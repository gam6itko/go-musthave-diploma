// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	diploma "github.com/gam6itko/go-musthave-diploma/internal/diploma"
	gomock "github.com/golang/mock/gomock"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockIOrderRepository) FindByID(ctx context.Context, orderID uint64) (*diploma.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, orderID)
	ret0, _ := ret[0].(*diploma.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIOrderRepositoryMockRecorder) FindByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIOrderRepository)(nil).FindByID), ctx, orderID)
}

// FindByUserID mocks base method.
func (m *MockIOrderRepository) FindByUserID(ctx context.Context, userID uint64) ([]diploma.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]diploma.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockIOrderRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockIOrderRepository)(nil).FindByUserID), ctx, userID)
}

// InsertNew mocks base method.
func (m *MockIOrderRepository) InsertNew(ctx context.Context, order *diploma.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNew", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNew indicates an expected call of InsertNew.
func (mr *MockIOrderRepositoryMockRecorder) InsertNew(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNew", reflect.TypeOf((*MockIOrderRepository)(nil).InsertNew), ctx, order)
}

// UpdateStatus mocks base method.
func (m *MockIOrderRepository) UpdateStatus(ctx context.Context, orderID uint64, status diploma.OrderStatus, accrual float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderID, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIOrderRepositoryMockRecorder) UpdateStatus(ctx, orderID, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateStatus), ctx, orderID, status, accrual)
}
