// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/withdrawal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	diploma "github.com/gam6itko/go-musthave-diploma/internal/diploma"
	gomock "github.com/golang/mock/gomock"
)

// MockIWithdrawalRepository is a mock of IWithdrawalRepository interface.
type MockIWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWithdrawalRepositoryMockRecorder
}

// MockIWithdrawalRepositoryMockRecorder is the mock recorder for MockIWithdrawalRepository.
type MockIWithdrawalRepositoryMockRecorder struct {
	mock *MockIWithdrawalRepository
}

// NewMockIWithdrawalRepository creates a new mock instance.
func NewMockIWithdrawalRepository(ctrl *gomock.Controller) *MockIWithdrawalRepository {
	mock := &MockIWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockIWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWithdrawalRepository) EXPECT() *MockIWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockIWithdrawalRepository) FindByUserID(ctx context.Context, userID uint64) ([]diploma.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]diploma.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockIWithdrawalRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockIWithdrawalRepository)(nil).FindByUserID), ctx, userID)
}
