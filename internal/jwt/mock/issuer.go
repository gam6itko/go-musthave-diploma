// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/jwt/main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIssuer is a mock of IIssuer interface.
type MockIIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockIIssuerMockRecorder
}

// MockIIssuerMockRecorder is the mock recorder for MockIIssuer.
type MockIIssuerMockRecorder struct {
	mock *MockIIssuer
}

// NewMockIIssuer creates a new mock instance.
func NewMockIIssuer(ctrl *gomock.Controller) *MockIIssuer {
	mock := &MockIIssuer{ctrl: ctrl}
	mock.recorder = &MockIIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIssuer) EXPECT() *MockIIssuerMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockIIssuer) Issue(userID uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockIIssuerMockRecorder) Issue(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockIIssuer)(nil).Issue), userID)
}

// MockIParser is a mock of IParser interface.
type MockIParser struct {
	ctrl     *gomock.Controller
	recorder *MockIParserMockRecorder
}

// MockIParserMockRecorder is the mock recorder for MockIParser.
type MockIParserMockRecorder struct {
	mock *MockIParser
}

// NewMockIParser creates a new mock instance.
func NewMockIParser(ctrl *gomock.Controller) *MockIParser {
	mock := &MockIParser{ctrl: ctrl}
	mock.recorder = &MockIParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParser) EXPECT() *MockIParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockIParser) Parse(tokenString string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockIParserMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIParser)(nil).Parse), tokenString)
}
